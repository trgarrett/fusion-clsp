(
  ; the ultimate util
  (include curry.clib)

  ; sha256
  (include sha256tree.clib)

  ;; return the full puzzlehash for a singleton with the innerpuzzle curried in
  (defun-inline calculate_full_puzzle_hash (SINGLETON_STRUCT inner_puzzle_hash)
    (curry_hashes (f SINGLETON_STRUCT)
      ; calculate the singleton struct
      (sha256tree SINGLETON_STRUCT)
      inner_puzzle_hash
    )
  )

  ;; return the full puzzlehash for an NFT locked by the nft_inner_puzzle_hash
  (defun-inline calculate_nft_full_puzzle_hash (SINGLETON_MOD_HASH 
                                                LAUNCHER_PUZZLE_HASH 
                                                NFT_STATE_LAYER_MOD_HASH
                                                METADATA_UPDATER_PUZZLE_HASH_HASH
                                                nft_launcher_id
                                                metadata_hash
                                                nft_inner_puzzle_hash)
    (curry_hashes 
      SINGLETON_MOD_HASH   
      (sha256 2
        (sha256 1 SINGLETON_MOD_HASH)
        (sha256 2
          (sha256 1 nft_launcher_id)
          (sha256 1 LAUNCHER_PUZZLE_HASH)
        )
      )
      (curry_hashes 
        NFT_STATE_LAYER_MOD_HASH 
        (sha256 1 NFT_STATE_LAYER_MOD_HASH)
        metadata_hash
        METADATA_UPDATER_PUZZLE_HASH_HASH
        nft_inner_puzzle_hash
      )
    )  
  )

  (defun-inline calculate_nft_ownership_layer_puzzle_hash (NFT_OWNERSHIP_LAYER_MOD_HASH current_owner transfer_program_hash inner_puzzle_hash)
      (curry_hashes NFT_OWNERSHIP_LAYER_MOD_HASH
        (sha256 1 NFT_OWNERSHIP_LAYER_MOD_HASH)
        (sha256 1 current_owner)
        transfer_program_hash
        inner_puzzle_hash
      )
  )

  ;; 
  ;;; given a list of atoms and a list of lists, prepend each atom to the respective list ((l1[0] . l2[0]) ... (l1[n] . l2[n]))
  (defun prepend_entries_to_lists (l1 l2)
      (if (all (l l1) (l l2))
          ; a list remains
          (c (c (f l1) (f l2)) (prepend_entries_to_lists (r l1) (r l2)))
          ; either the end or unbalanced (error case)
          (if (any (l l1) (l l2))
            (x) ; unbalanced
            ()
          )
      )
  )

)
