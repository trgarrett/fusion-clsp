;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Fusion for Monkeyzoo
;;
;; This puzzle represents the singleton which can unlock p2 singleton coins for NFT fusion, and
;; instruct the p2 singleton puzzle when it should take the other side of an offer.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(mod (
        SINGLETON_STRUCT ; my singleton_struct, formerly a Truth - ((SINGLETON_MOD_HASH, (LAUNCHER_ID, LAUNCHER_PUZZLE_HASH)))
        NFT_STATE_LAYER_MOD_HASH ; the puzzle hash of the nft state layer puzzle
        METADATA_UPDATER_PUZZLE_HASH_HASH ; the puzzle hash of the metadata update puzzle hash
        P2_SINGLETON_PUZZLE_HASH ; the puzzle hash for the singleton's pay to singleton puzzle
        OFFER_MOD_HASH ; the puzzle hash of the standard offer puzzle
        NFT_A_LAUNCHER_IDS ; commitment to one side of the swap pair, LIST of launcher coin IDs
        NFT_B_LAUNCHER_IDS ; commitment to the other side of a swap pair, LIST of launcher coin IDs
        singleton_coin_id ; the singleton coin ID -> I'd call this my_id and my_inner_puzzlehash, per convention
        singleton_inner_puzzlehash ; the current inner puzzlehash for the singleton
        nfts_to_lock ; tuples in the form (coin_id (inner_puzzlehash target_inner_puzzlehash)), target_inner_puzzlehash should always be P2_SINGLETON_PUZZLE_HASH
        nfts_to_release ; tuples in the form (coin_id (inner_puzzlehash target_inner_puzzlehash))
        a_or_b ; 'a' or 'b' - the coin symbolic name to release
        offer_nonce ; the cryptographic nonce required for offer settlement
        offer_wallet_asserts ; an additional list of puzzlehash-msg announcements to assert
     )

  (include condition_codes.clib)
  (include utils.clib)

  (defun-inline base_conditions (singleton_coin_id SINGLETON_STRUCT singleton_inner_puzzlehash)
    (list
      ; block ephemeral spends
      (list ASSERT_HEIGHT_RELATIVE 1)

      ; who am I?
      (list ASSERT_MY_COIN_ID singleton_coin_id)
      (list ASSERT_MY_PUZZLEHASH (calculate_full_puzzle_hash SINGLETON_STRUCT singleton_inner_puzzlehash))
      (list ASSERT_MY_AMOUNT 1) ; This feels unnecessary. And if you ever create such a singleton with amount > 1 it is locked forever.

      ; spend myself forward
      (list CREATE_COIN singleton_inner_puzzlehash 1 (list (f (r SINGLETON_STRUCT)))) ;; opt to keep details beyond launcher ID encoded in eve coin spend
    )
  )

  ; assert desired 'wallet' behavior as specified in the offer
  (defun assert_offer_wallet_asserts (offer_wallet_asserts conditions_so_far)
    (if offer_wallet_asserts)
      (c
        (list ASSERT_PUZZLE_ANNOUNCEMENT
          (sha256
            (f (f offer_wallet_asserts))
            (r (f offer_wallet_asserts))
          )
        )
        (assert_offer_wallet_asserts (r offer_wallet_asserts)
      )
      conditions_so_far
    )
  )


  ; maintain announcement loop with OFFER_MOD for making sure unlocked outputs get to final puzzlehash
  (defun-inline assert_offer_condition (SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH (nft_launcher_id coin_id inner_puzzlehash target_inner_puzzlehash) offer_nonce)
    (list ASSERT_PUZZLE_ANNOUNCEMENT
      (sha256
        (calculate_full_puzzle_hash SINGLETON_MOD_HASH nft_launcher_id LAUNCHER_PUZZLE_HASH inner_puzzlehash)
        (sha256tree (list offer_nonce (notarized_payment target_inner_puzzlehash )))
      )
    )
  )

  ; maintain announcement loop with p2 for unlocking to puzzlehash
  (defun-inline announce_p2_condition (SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH (nft_launcher_id coin_id inner_puzzlehash target_inner_puzzlehash) singleton_coin_id release_puzzlehash)
    (list CREATE_PUZZLE_ANNOUNCEMENT (sha256 singleton_coin_id nft_launcher_id release_puzzlehash))
  )

  ; maintain announcement loop with p2 for unlocking to puzzlehash
  (defun-inline assert_p2_condition (SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH (nft_launcher_id coin_id inner_puzzlehash target_inner_puzzlehash) release_puzzlehash)
    (list ASSERT_COIN_ANNOUNCEMENT
      (sha256 coin_id (sha256 singleton_coin_id nft_launcher_id release_puzzlehash))
    )
  )

  (defun compute_nft_lock_conditions (SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH nfts_to_lock offer_nonce conditions_so_far)
    (if nfts_to_lock
      (c
        (offer_assert_condition SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH (f nfts_to_lock) offer_nonce)
        (compute_nft_lock_conditions SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH (r nfts_to_lock) offer_nonce)
      )
      conditions_so_far
    )
  )

  (defun compute_nft_unlock_conditions (SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH OFFER_MOD_HASH nfts_to_unlock singleton_coin_id offer_nonce conditions_so_far)
    (if nfts_to_unlock
      (c
        (assert_offer_condition SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH (f nfts_to_unlock) offer_nonce)
        (c
          (assert_p2_condition SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH (f nfts_to_unlock) OFFER_MOD_HASH)
          (c
            (announce_p2_condition SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH (f nfts_to_unlock) singleton_coin_id OFFER_MOD_HASH)
            (compute_nft_unlock_conditions SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH OFFER_MOD_HASH (r nfts_to_unlock) singleton_coin_id offer_nonce)
          )
        )
      )
      conditions_so_far
    )
  )

  (defun-inline notarized_payment (nft_next_puzzlehash)
    (list nft_next_puzzlehash 1 (list nft_next_puzzlehash))
  )

  (defun-inline lock_and_release (SINGLETON_STRUCT P2_SINGLETON_PUZZLE_HASH OFFER_MOD_HASH
                                  singleton_coin_id singleton_inner_puzzlehash 
                                  nfts_to_lock nfts_to_release
                                  offer_nonce offer_wallet_asserts)
      (assert_offer_wallet_asserts offer_wallet_asserts
        (compute_nft_lock_conditions SINGLETON_STRUCT OFFER_MOD_HASH nfts_to_lock offer_nonce
          (compute_nft_unlock_conditions SINGLETON_STRUCT OFFER_MOD_HASH nfts_to_unlock singleton_coin_id offer_nonce
              (base_conditions singleton_coin_id SINGLETON_STRUCT singleton_inner_puzzlehash)
          )
        )
      )
  )
  
  (if (any (= a_or_b 'a') (= a_or_b 'b'))
    (if (= a_or_b 'a')
      ; release a, lock b
      (lock_and_release 
              SINGLETON_STRUCT P2_SINGLETON_PUZZLE_HASH OFFER_MOD_HASH
              singleton_coin_id singleton_inner_puzzlehash 
              (prepend_entries_to_lists NFT_B_LAUNCHER_IDS nfts_to_lock)
              (prepend_entries_to_lists NFT_A_LAUNCHER_IDS nfts_to_release)
              nft_next_puzzlehashes offer_nonce offer_wallet_asserts)
      ; release b and lock a
      (lock_and_release 
              SINGLETON_STRUCT P2_SINGLETON_PUZZLE_HASH OFFER_MOD_HASH
              singleton_coin_id singleton_inner_puzzlehash 
              (prepend_entries_to_lists NFT_A_LAUNCHER_IDS nfts_to_lock)
              (prepend_entries_to_lists NFT_B_LAUNCHER_IDS nfts_to_release)
              offer_nonce offer_wallet_asserts)
    )
    (x a_or_b)
  )
)
