;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Fusion for Monkeyzoo
;;
;; This puzzle represents the singleton which can unlock p2 singleton coins for NFT fusion, and
;; instruct the p2 singleton puzzle when it should take the other side of an offer.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(mod (
        SINGLETON_STRUCT ; my singleton_struct, formerly a Truth 
                         ; ((SINGLETON_MOD_HASH, (LAUNCHER_ID, LAUNCHER_PUZZLE_HASH)))
        P2_SINGLETON_PUZZLE_HASH ; the puzzle hash for the singleton's pay to singleton puzzle
        OFFER_MOD_HASH ; the puzzle hash of the standard offer puzzle
        NFT_STATE_LAYER_MOD_HASH ; the puzzle hash of the standard NFT state layer puzzle
        NFT_OWNERSHIP_LAYER_MOD_HASH ; the puzzle hash of the standard NFT ownership layer puzzle
        METADATA_UPDATER_PUZZLE_HASH_HASH ; the puzzlehash of the puzzlehash of the metadata updater
        NFT_A_LAUNCHER_IDS ; commitment to one side of the swap pair, LIST of launcher coin IDs
        NFT_B_LAUNCHER_IDS ; commitment to the other side of a swap pair, LIST of launcher coin IDs
        my_id ; the singleton coin ID
        my_inner_puzzlehash ; the current inner puzzlehash for the singleton
        my_amount ; the amount of the singleton
        nfts_to_lock ; list of (coin_id nft_metadata_hash nft_did nft_transfer_program_hash)
                     ; final argument target_inner_puzzlehash omitted and enforced as P2_SINGLETON_PUZZLE_HASH
        nfts_to_unlock ; list of (coin_id nft_metadata_hash nft_did nft_transfer_program_hash target_inner_puzzlehash)
        unlock_a ; if true: unlock A, otherwise unlock B
        offer_nonce ; the cryptographic nonce required for offer settlement
     )

  (include condition_codes.clib)
  (include utils.clib)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; make it easy to locate on-chain coins corresponding to CHIP-0021 puzzles
  ;; echo "CHIP-0021" | sha256sum -> bytes32
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defconstant HINT 0x0a8d35c54b18e9be24a1aebc49497ebc53d33c6b875d7e2c984cbe35185b5a7f)

  (defun-inline base_conditions (SINGLETON_STRUCT my_id my_inner_puzzlehash my_amount)
    (list
      ; block ephemeral spends
      (list ASSERT_HEIGHT_RELATIVE 1)

      ; who am I?
      (list ASSERT_MY_COIN_ID my_id)
      (list ASSERT_MY_PUZZLEHASH (calculate_full_puzzle_hash SINGLETON_STRUCT my_inner_puzzlehash))
      (list ASSERT_MY_AMOUNT my_amount)

      ; spend myself forward
      (list CREATE_COIN my_inner_puzzlehash my_amount (list HINT (f (r SINGLETON_STRUCT)))) ;; opt to keep details beyond hint and launcher ID encoded in eve coin spend
    )
  )

  ; maintain announcement loop with OFFER_MOD for making sure unlocked outputs get to final puzzlehash
  (defun-inline assert_offer_condition (
          SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH OFFER_MOD_HASH 
          NFT_STATE_LAYER_MOD_HASH NFT_OWNERSHIP_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH
          (nft_launcher_id nft_coin_id nft_metadata_hash nft_did nft_transfer_program_hash) 
          target_inner_puzzlehash offer_nonce
        )

    (list ASSERT_PUZZLE_ANNOUNCEMENT
      (sha256
        ; need to PROVE announcement from OFFER_MOD_HASH to prevent fakes
        (calculate_nft_full_puzzle_hash
                SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH 
                NFT_STATE_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH
                nft_launcher_id nft_metadata_hash
                (calculate_nft_ownership_layer_puzzle_hash 
                    NFT_OWNERSHIP_LAYER_MOD_HASH nft_did nft_transfer_program_hash OFFER_MOD_HASH
                )
        )      
        (sha256tree (list offer_nonce (notarized_payment target_inner_puzzlehash )))
      )
    )
  )

  ; maintain announcement loop with p2 for unlocking to puzzlehash
  (defun-inline announce_p2_condition (my_id nft_launcher_id OFFER_MOD_HASH)
    (list CREATE_PUZZLE_ANNOUNCEMENT (sha256 my_id nft_launcher_id OFFER_MOD_HASH))
  )

  ; maintain announcement loop with p2 for unlocking to puzzlehash
  (defun-inline assert_p2_condition (my_id nft_launcher_id nft_coin_id OFFER_MOD_HASH)
    (list ASSERT_COIN_ANNOUNCEMENT
      (sha256 nft_coin_id (sha256 my_id nft_launcher_id OFFER_MOD_HASH))
    )
  )

  (defun compute_nft_lock_conditions (SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH P2_SINGLETON_PUZZLE_HASH OFFER_MOD_HASH NFT_STATE_LAYER_MOD_HASH NFT_OWNERSHIP_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH
          nfts_to_lock offer_nonce conditions_so_far)
    (if nfts_to_lock
      (c
        (assert_offer_condition SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH OFFER_MOD_HASH NFT_STATE_LAYER_MOD_HASH NFT_OWNERSHIP_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH
                (f nfts_to_lock) P2_SINGLETON_PUZZLE_HASH offer_nonce)
        (compute_nft_lock_conditions SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH P2_SINGLETON_PUZZLE_HASH OFFER_MOD_HASH NFT_STATE_LAYER_MOD_HASH NFT_OWNERSHIP_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH
                (r nfts_to_lock) offer_nonce conditions_so_far)
      )
      conditions_so_far
    )
  )

  (defun compute_nft_unlock_conditions (SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH OFFER_MOD_HASH NFT_STATE_LAYER_MOD_HASH NFT_OWNERSHIP_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH
          nfts_to_unlock my_id offer_nonce conditions_so_far)
    (if nfts_to_unlock
      (c
        (assert_offer_condition SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH OFFER_MOD_HASH NFT_STATE_LAYER_MOD_HASH NFT_OWNERSHIP_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH 
                (f nfts_to_unlock) (f (r (r (r (r (r (f nfts_to_unlock))))))) offer_nonce)
        (c
          (assert_p2_condition my_id (f (f nfts_to_unlock)) (f (r (f nfts_to_unlock))) OFFER_MOD_HASH)
          (c
            (announce_p2_condition my_id (f (f nfts_to_unlock)) OFFER_MOD_HASH)
            (compute_nft_unlock_conditions SINGLETON_MOD_HASH LAUNCHER_PUZZLE_HASH OFFER_MOD_HASH 
                    NFT_STATE_LAYER_MOD_HASH NFT_OWNERSHIP_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH (r nfts_to_unlock) my_id offer_nonce conditions_so_far)
          )
        )
      )
      conditions_so_far
    )
  )

  (defun-inline notarized_payment (nft_next_puzzlehash)
    (list nft_next_puzzlehash 1 (list nft_next_puzzlehash))
  )

  (defun-inline lock_and_unlock (SINGLETON_STRUCT P2_SINGLETON_PUZZLE_HASH OFFER_MOD_HASH
                                  NFT_STATE_LAYER_MOD_HASH NFT_OWNERSHIP_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH
                                  my_id my_inner_puzzlehash my_amount
                                  nfts_to_lock nfts_to_unlock
                                  offer_nonce)
      (compute_nft_lock_conditions 
              (f SINGLETON_STRUCT) (r (r SINGLETON_STRUCT)) P2_SINGLETON_PUZZLE_HASH OFFER_MOD_HASH NFT_STATE_LAYER_MOD_HASH NFT_OWNERSHIP_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH
              nfts_to_lock offer_nonce
          (compute_nft_unlock_conditions
                  (f SINGLETON_STRUCT) (r (r SINGLETON_STRUCT)) OFFER_MOD_HASH NFT_STATE_LAYER_MOD_HASH NFT_OWNERSHIP_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH 
                   nfts_to_unlock my_id offer_nonce
              (base_conditions SINGLETON_STRUCT my_id my_inner_puzzlehash my_amount)
          )
      )
  )

  (if unlock_a
    ; unlock a, lock b
    (lock_and_unlock 
            SINGLETON_STRUCT P2_SINGLETON_PUZZLE_HASH OFFER_MOD_HASH
            NFT_STATE_LAYER_MOD_HASH NFT_OWNERSHIP_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH
            my_id my_inner_puzzlehash my_amount
            (prepend_entries_to_lists NFT_B_LAUNCHER_IDS nfts_to_lock)
            (prepend_entries_to_lists NFT_A_LAUNCHER_IDS nfts_to_unlock)
            offer_nonce)
    ; unlock b and lock a
    (lock_and_unlock 
            SINGLETON_STRUCT P2_SINGLETON_PUZZLE_HASH OFFER_MOD_HASH
            NFT_STATE_LAYER_MOD_HASH NFT_OWNERSHIP_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH_HASH
            my_id my_inner_puzzlehash my_amount
            (prepend_entries_to_lists NFT_A_LAUNCHER_IDS nfts_to_lock)
            (prepend_entries_to_lists NFT_B_LAUNCHER_IDS nfts_to_unlock)
            offer_nonce)
  )
)