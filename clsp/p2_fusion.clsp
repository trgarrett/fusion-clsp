(mod 
    (
        SINGLETON_MOD_HASH ; the mod-hash for the singleton_top_layer puzzle
        LAUNCHER_ID ; the ID of the singleton we are committed to paying to
        LAUNCHER_PUZZLE_HASH ; the puzzle hash of the launcher
        singleton_inner_puzzle_hash ; the inner puzzlehash for our singleton at the current time
        singleton_coin_id ; the specific coin we want to make an announcement tied to
        my_launcher_id ; the launcher ID of the NFT
        my_singleton_inner_puzzle_hash ; the NFT's singleton inner puzzlehash
        my_amount
        next_puzzlehash ; where the NFT coin should be sent (either released or locked)
    )

    (include condition_codes.clib)
    (include utils.clib)

    (list
        (list ASSERT_MY_AMOUNT my_amount)

        ; prove supplied NFT coin matches the expected derived puzzle hash
        (list ASSERT_MY_PUZZLEHASH
            (calculate_full_puzzle_hash (c SINGLETON_MOD_HASH (c my_launcher_id LAUNCHER_PUZZLE_HASH)) my_singleton_inner_puzzle_hash)
        )

        ; assert singleton spend behavior
        (list ASSERT_PUZZLE_ANNOUNCEMENT
            (sha256
                (calculate_full_puzzle_hash (c SINGLETON_MOD_HASH (c LAUNCHER_ID LAUNCHER_PUZZLE_HASH)) singleton_inner_puzzle_hash)
                (sha256 singleton_coin_id my_launcher_id next_puzzlehash)
            )
        )
        
        ; create and announce NFT coin
        (list CREATE_COIN next_puzzlehash my_amount (list next_puzzlehash))
        
        ; announce that a SPECIFIC singleton is being spent to help prevent ephemeral singleton spends from influencing
        ; announce the combination of NFT launcher ID and next puzzlehash
        (list CREATE_COIN_ANNOUNCEMENT (sha256 singleton_coin_id my_launcher_id next_puzzlehash))
    )

)

